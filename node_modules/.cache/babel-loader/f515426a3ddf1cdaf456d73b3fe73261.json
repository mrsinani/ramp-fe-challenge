{"ast":null,"code":"var _jsxFileName = \"/Users/danaid/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [approvedStates, setApprovedStates] = useState({});\n  const [allPaginatedTransactions, setAllPaginatedTransactions] = useState([]);\n  const transactions = useMemo(() => {\n    const combinedTransactions = transactionsByEmployee !== null && transactionsByEmployee !== void 0 ? transactionsByEmployee : allPaginatedTransactions;\n    return combinedTransactions.map(transaction => {\n      var _approvedStates$trans;\n\n      return { ...transaction,\n        approved: (_approvedStates$trans = approvedStates[transaction.id]) !== null && _approvedStates$trans !== void 0 ? _approvedStates$trans : transaction.approved\n      };\n    });\n  }, [allPaginatedTransactions, transactionsByEmployee, approvedStates]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    setAllPaginatedTransactions([]);\n    await paginatedTransactionsUtils.fetchAll();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setApprovedStates(prevStates => ({ ...prevStates\n    }));\n    setAllPaginatedTransactions([]);\n\n    if (employeeId === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]);\n  const toggleApproval = useCallback(transactionId => {\n    setApprovedStates(prevState => ({ ...prevState,\n      [transactionId]: !prevState[transactionId]\n    }));\n  }, []);\n  const handleViewMore = useCallback(async () => {\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.nextPage) {\n      await paginatedTransactionsUtils.fetchAll();\n\n      if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n        setAllPaginatedTransactions(prev => [...prev, ...paginatedTransactions.data]);\n      }\n    }\n  }, [paginatedTransactions, paginatedTransactionsUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: !employees && isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          onToggleApproval: toggleApproval\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && transactionsByEmployee === null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tHUG4DKIzYGJzUdVl06TzVlYb7k=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","approvedStates","setApprovedStates","allPaginatedTransactions","setAllPaginatedTransactions","transactions","combinedTransactions","map","transaction","approved","id","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","prevStates","fetchById","toggleApproval","transactionId","prevState","handleViewMore","nextPage","prev","loading","item","value","label","firstName","lastName","newValue"],"sources":["/Users/danaid/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee,Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [approvedStates, setApprovedStates] = useState<Record<string, boolean>>({})\n  const [allPaginatedTransactions, setAllPaginatedTransactions] = useState<Transaction[]>([])\n\n  const transactions = useMemo(() => {\n    const combinedTransactions = transactionsByEmployee ?? allPaginatedTransactions\n    return combinedTransactions.map((transaction) => ({\n      ...transaction,\n      approved: approvedStates[transaction.id] ?? transaction.approved,\n    }))\n  }, [allPaginatedTransactions, transactionsByEmployee, approvedStates])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    setAllPaginatedTransactions([])\n\n    await paginatedTransactionsUtils.fetchAll()\n    await employeeUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      setApprovedStates((prevStates) => ({ ...prevStates }))\n      setAllPaginatedTransactions([])\n\n      if (employeeId === EMPTY_EMPLOYEE.id) {\n        await loadAllTransactions()\n      } else {\n        await transactionsByEmployeeUtils.fetchById(employeeId)\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]\n  )\n\n  const toggleApproval = useCallback((transactionId: string) => {\n    setApprovedStates((prevState) => ({\n      ...prevState,\n      [transactionId]: !prevState[transactionId],\n    }))\n  }, [])\n\n  const handleViewMore = useCallback(async () => {\n    if (paginatedTransactions?.nextPage) {\n      await paginatedTransactionsUtils.fetchAll()\n      if (paginatedTransactions?.data) {\n        setAllPaginatedTransactions((prev) => [...prev, ...paginatedTransactions.data])\n      }\n    }\n  }, [paginatedTransactions, paginatedTransactionsUtils])\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={!employees && isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} onToggleApproval={toggleApproval} />\n\n          {paginatedTransactions?.nextPage !== null && transactionsByEmployee === null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}