{"ast":null,"code":"var _jsxFileName = \"/Users/danaid/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState(null);\n  const [isFilteredByEmployee, setIsFilteredByEmployee] = useState(false);\n  const updateTransactionState = useCallback(updatedTransaction => {\n    setAllTransactions(prev => {\n      var _prev$map;\n\n      return (_prev$map = prev === null || prev === void 0 ? void 0 : prev.map(transaction => transaction.id === updatedTransaction.id ? updatedTransaction : transaction)) !== null && _prev$map !== void 0 ? _prev$map : null;\n    });\n    transactionsByEmployeeUtils.invalidateData();\n    paginatedTransactionsUtils.invalidateData();\n  }, [transactionsByEmployeeUtils, paginatedTransactionsUtils]);\n  const transactions = useMemo(() => {\n    var _ref, _ref2;\n\n    return (_ref = (_ref2 = allTransactions !== null && allTransactions !== void 0 ? allTransactions : paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _ref2 !== void 0 ? _ref2 : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [allTransactions, paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    setIsFilteredByEmployee(false);\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setAllTransactions(null);\n    setIsFilteredByEmployee(true);\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadMoreTransactions = useCallback(async () => {\n    await paginatedTransactionsUtils.fetchAll();\n    setAllTransactions(prev => {\n      var _paginatedTransaction;\n\n      return [...(prev !== null && prev !== void 0 ? prev : []), ...((_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : [])];\n    });\n  }, [paginatedTransactionsUtils, paginatedTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          onToggleTransaction: updateTransactionState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), transactions !== null && !isFilteredByEmployee && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadMoreTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"uOoboFlphqCRLfntMM53PHU4U/8=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","isFilteredByEmployee","setIsFilteredByEmployee","updateTransactionState","updatedTransaction","prev","map","transaction","id","invalidateData","transactions","loadAllTransactions","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loadMoreTransactions","loading","item","value","label","firstName","lastName","newValue"],"sources":["/Users/danaid/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [allTransactions, setAllTransactions] = useState<Transaction[] | null>(null)\n  const [isFilteredByEmployee, setIsFilteredByEmployee] = useState(false)\n\n  const updateTransactionState = useCallback(\n    (updatedTransaction: Transaction) => {\n      setAllTransactions(\n        (prev) =>\n          prev?.map((transaction) =>\n            transaction.id === updatedTransaction.id ? updatedTransaction : transaction\n          ) ?? null\n      )\n      transactionsByEmployeeUtils.invalidateData()\n      paginatedTransactionsUtils.invalidateData()\n    },\n    [transactionsByEmployeeUtils, paginatedTransactionsUtils]\n  )\n\n  const transactions = useMemo(\n    () => allTransactions ?? paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [allTransactions, paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    setIsFilteredByEmployee(false)\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      setAllTransactions(null)\n      setIsFilteredByEmployee(true)\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  const loadMoreTransactions = useCallback(async () => {\n    await paginatedTransactionsUtils.fetchAll()\n\n    setAllTransactions((prev) => [...(prev ?? []), ...(paginatedTransactions?.data ?? [])])\n  }, [paginatedTransactionsUtils, paginatedTransactions])\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} onToggleTransaction={updateTransactionState} />\n\n          {transactions !== null && !isFilteredByEmployee && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadMoreTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}