{"ast":null,"code":"var _jsxFileName = \"/Users/danaid/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [approvedStates, setApprovedStates] = useState({});\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    const combinedTransactions = (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n    return combinedTransactions ? combinedTransactions.map(transaction => {\n      var _approvedStates$trans;\n\n      return { ...transaction,\n        approved: (_approvedStates$trans = approvedStates[transaction.id]) !== null && _approvedStates$trans !== void 0 ? _approvedStates$trans : transaction.approved\n      };\n    }) : null;\n  }, [paginatedTransactions, transactionsByEmployee, approvedStates]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setApprovedStates({});\n\n    if (employeeId === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]);\n  const toggleApproval = useCallback(transactionId => {\n    setApprovedStates(prevState => ({ ...prevState,\n      [transactionId]: !prevState[transactionId]\n    }));\n  }, []);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: !employees && !transactionsByEmployee,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          onToggleApproval: toggleApproval\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && transactionsByEmployee === null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchAll();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zBQmEPUIDUCVJqHOspAGnoM53bE=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","approvedStates","setApprovedStates","transactions","combinedTransactions","map","transaction","approved","id","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","toggleApproval","transactionId","prevState","loading","item","value","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/danaid/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [approvedStates, setApprovedStates] = useState<Record<string, boolean>>({})\n\n  const transactions = useMemo(() => {\n    const combinedTransactions = paginatedTransactions?.data ?? transactionsByEmployee ?? null\n    return combinedTransactions\n      ? combinedTransactions.map((transaction) => ({\n          ...transaction,\n          approved: approvedStates[transaction.id] ?? transaction.approved,\n        }))\n      : null\n  }, [paginatedTransactions, transactionsByEmployee, approvedStates])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      setApprovedStates({})\n      if (employeeId === EMPTY_EMPLOYEE.id) {\n        await loadAllTransactions()\n      } else {\n        await transactionsByEmployeeUtils.fetchById(employeeId)\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]\n  )\n\n  const toggleApproval = useCallback((transactionId: string) => {\n    setApprovedStates((prevState) => ({\n      ...prevState,\n      [transactionId]: !prevState[transactionId],\n    }))\n  }, [])\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={!employees && !transactionsByEmployee}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} onToggleApproval={toggleApproval} />\n\n          {paginatedTransactions?.nextPage !== null && transactionsByEmployee === null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchAll()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}