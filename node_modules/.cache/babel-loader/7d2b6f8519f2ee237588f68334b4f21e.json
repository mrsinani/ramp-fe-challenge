{"ast":null,"code":"var _jsxFileName = \"/Users/danaid/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions,\n    onToggleApproval\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [approvedStates, setApprovedStates] = useState({}); // Merge approval states with transactions\n\n  const mergedTransactions = useMemo(() => {\n    return transactions === null || transactions === void 0 ? void 0 : transactions.map(transaction => {\n      var _approvedStates$trans;\n\n      return { ...transaction,\n        approved: (_approvedStates$trans = approvedStates[transaction.id]) !== null && _approvedStates$trans !== void 0 ? _approvedStates$trans : transaction.approved\n      };\n    });\n  }, [transactions, approvedStates]);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    });\n    setApprovedStates(prev => ({ ...prev,\n      [transactionId]: newValue\n    }));\n  }, [fetchWithoutCache]);\n  useEffect(() => {\n    // Sync approvedStates with new transactions to avoid missing toggled states\n    if (transactions) {\n      const transactionIds = transactions.map(transaction => transaction.id);\n      setApprovedStates(prev => {\n        const newState = { ...prev\n        };\n        transactionIds.forEach(id => {\n          if (!(id in newState)) {\n            var _transactions$find;\n\n            newState[id] = ((_transactions$find = transactions.find(t => t.id === id)) === null || _transactions$find === void 0 ? void 0 : _transactions$find.approved) || false;\n          }\n        });\n        return newState;\n      });\n    }\n  }, [transactions]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: mergedTransactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"IncHoGlLe0Ll0CS51Xnt3B3NnnM=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","useCustomFetch","TransactionPane","Transactions","transactions","onToggleApproval","fetchWithoutCache","loading","approvedStates","setApprovedStates","mergedTransactions","map","transaction","approved","id","setTransactionApproval","transactionId","newValue","value","prev","transactionIds","newState","forEach","find","t"],"sources":["/Users/danaid/Downloads/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\"\nimport { SetTransactionApprovalParams } from \"src/utils/types\"\nimport { TransactionPane } from \"./TransactionPane\"\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\"\n\nexport const Transactions: TransactionsComponent = ({ transactions, onToggleApproval }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch()\n  const [approvedStates, setApprovedStates] = useState<Record<string, boolean>>({})\n\n  // Merge approval states with transactions\n  const mergedTransactions = useMemo(() => {\n    return transactions?.map((transaction) => ({\n      ...transaction,\n      approved: approvedStates[transaction.id] ?? transaction.approved,\n    }))\n  }, [transactions, approvedStates])\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      })\n      setApprovedStates((prev) => ({\n        ...prev,\n        [transactionId]: newValue,\n      }))\n    },\n    [fetchWithoutCache]\n  )\n\n  useEffect(() => {\n    // Sync approvedStates with new transactions to avoid missing toggled states\n    if (transactions) {\n      const transactionIds = transactions.map((transaction) => transaction.id)\n      setApprovedStates((prev) => {\n        const newState = { ...prev }\n        transactionIds.forEach((id) => {\n          if (!(id in newState)) {\n            newState[id] = transactions.find((t) => t.id === id)?.approved || false\n          }\n        })\n        return newState\n      })\n    }\n  }, [transactions])\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {mergedTransactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAAwC;EAAA;;EAAA,IAAvC;IAAEC,YAAF;IAAgBC;EAAhB,CAAuC;EACzF,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCN,cAAc,EAArD;EACA,MAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAA0B,EAA1B,CAApD,CAFyF,CAIzF;;EACA,MAAMU,kBAAkB,GAAGX,OAAO,CAAC,MAAM;IACvC,OAAOK,YAAP,aAAOA,YAAP,uBAAOA,YAAY,CAAEO,GAAd,CAAmBC,WAAD;MAAA;;MAAA,OAAkB,EACzC,GAAGA,WADsC;QAEzCC,QAAQ,2BAAEL,cAAc,CAACI,WAAW,CAACE,EAAb,CAAhB,yEAAoCF,WAAW,CAACC;MAFf,CAAlB;IAAA,CAAlB,CAAP;EAID,CALiC,EAK/B,CAACT,YAAD,EAAeI,cAAf,CAL+B,CAAlC;EAOA,MAAMO,sBAAsB,GAAGlB,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEmB,aAAF;MAAiBC;IAAjB,CAAgC;IACrC,MAAMX,iBAAiB,CAAqC,wBAArC,EAA+D;MACpFU,aADoF;MAEpFE,KAAK,EAAED;IAF6E,CAA/D,CAAvB;IAIAR,iBAAiB,CAAEU,IAAD,KAAW,EAC3B,GAAGA,IADwB;MAE3B,CAACH,aAAD,GAAiBC;IAFU,CAAX,CAAD,CAAjB;EAID,CAVuC,EAWxC,CAACX,iBAAD,CAXwC,CAA1C;EAcAR,SAAS,CAAC,MAAM;IACd;IACA,IAAIM,YAAJ,EAAkB;MAChB,MAAMgB,cAAc,GAAGhB,YAAY,CAACO,GAAb,CAAkBC,WAAD,IAAiBA,WAAW,CAACE,EAA9C,CAAvB;MACAL,iBAAiB,CAAEU,IAAD,IAAU;QAC1B,MAAME,QAAQ,GAAG,EAAE,GAAGF;QAAL,CAAjB;QACAC,cAAc,CAACE,OAAf,CAAwBR,EAAD,IAAQ;UAC7B,IAAI,EAAEA,EAAE,IAAIO,QAAR,CAAJ,EAAuB;YAAA;;YACrBA,QAAQ,CAACP,EAAD,CAAR,GAAe,uBAAAV,YAAY,CAACmB,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACV,EAAF,KAASA,EAAlC,2EAAuCD,QAAvC,KAAmD,KAAlE;UACD;QACF,CAJD;QAKA,OAAOQ,QAAP;MACD,CARgB,CAAjB;IASD;EACF,CAdQ,EAcN,CAACjB,YAAD,CAdM,CAAT;;EAgBA,IAAIA,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGM,kBAAkB,CAACC,GAAnB,CAAwBC,WAAD,iBACtB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEL,OAHX;MAIE,sBAAsB,EAAEQ;IAJ1B,GACOH,WAAW,CAACE,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA1DM;;GAAMX,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}